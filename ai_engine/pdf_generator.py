from fpdf import FPDF
from flask import Flask, jsonify, request
import os

app = Flask(__name__)

def generate_result_pdf(resume_data, recommendations, output_path):
    # Ensure output_path ends with .pdf
    if not output_path.lower().endswith('.pdf'):
        output_path = os.path.splitext(output_path)[0] + '.pdf'

    # Initialize PDF
    pdf = FPDF(orientation='P', unit='mm', format='A4')
    pdf.add_page()
    pdf.set_font('Arial', '', 12)  # Use built-in Arial font
    pdf.set_margins(left=20, top=20, right=20)

    # Helper function to clean text
    def clean(text):
        if text is None:
            return ""
        return str(text).replace("—", "-").encode("utf-8", "ignore").decode("utf-8")

    # Title Page
    pdf.set_font('Arial', 'B', 24)
    pdf.cell(0, 10, clean("SmartHire Career Report"), ln=True, align='C')
    pdf.set_font('Arial', '', 14)
    pdf.cell(0, 10, clean(f"For: {resume_data.get('name', 'User')}"), ln=True, align='C')
    pdf.cell(0, 10, clean(f"Email: {resume_data.get('email', 'N/A')}"), ln=True, align='C')
    pdf.ln(15)

    # Section Header Helper
    def add_section_header(title):
        pdf.set_font('Arial', 'B', 16)
        pdf.set_fill_color(230, 230, 250)  # Light lavender background
        pdf.cell(0, 10, clean(title), ln=True, fill=True, align='L')
        pdf.ln(5)
        pdf.set_font('Arial', '', 12)

    # Career Advice
    add_section_header("Career Advice")
    advice = recommendations.get("career_advice", "No career advice provided.")
    pdf.multi_cell(0, 8, clean(advice))
    pdf.ln(8)

    # Recommended Jobs
    add_section_header("Recommended Job Roles")
    jobs = recommendations.get("recommended_jobs", [])
    if jobs:
        for job in jobs:
            pdf.cell(10, 8, "•", align='L')
            pdf.multi_cell(0, 8, clean(job))
    else:
        pdf.multi_cell(0, 8, clean("No job recommendations available."))
    pdf.ln(8)

    # Courses
    add_section_header("Recommended Courses")
    courses = recommendations.get("course_links", [])
    if courses:
        for course in courses:
            title = course.get('title', 'Unknown Course')
            course_type = course.get('type', 'N/A')
            url = course.get('url', 'N/A')
            pdf.cell(10, 8, "•", align='L')
            pdf.multi_cell(0, 8, clean(f"{title} ({course_type}) - {url}"))
    else:
        pdf.multi_cell(0, 8, clean("No course recommendations available."))
    pdf.ln(8)

    # Skill Gaps
    add_section_header("Skill Gaps by Job")
    skill_gaps = recommendations.get("skill_gaps", {})
    if skill_gaps:
        for job, gaps in skill_gaps.items():
            pdf.cell(10, 8, "•", align='L')
            pdf.multi_cell(0, 8, clean(f"{job}: {', '.join(gaps)}"))
    else:
        pdf.multi_cell(0, 8, clean("No skill gaps identified."))
    pdf.ln(8)

    # 8-Week Learning Plan
    add_section_header("8-Week Learning Plan")
    weekly_plan = recommendations.get("weekly_plan", [])
    if weekly_plan:
        for week in weekly_plan:
            pdf.cell(10, 8, "•", align='L')
            pdf.multi_cell(0, 8, clean(week))
    else:
        pdf.multi_cell(0, 8, clean("No learning plan provided."))
    pdf.ln(8)

    # Job-Market Demand
    add_section_header("Job-Market Demand")
    job_scope = recommendations.get("job_scope", {})
    if job_scope:
        for job, score in job_scope.items():
            pdf.cell(10, 8, "•", align='L')
            pdf.multi_cell(0, 8, clean(f"{job}: {score}/10"))
    else:
        pdf.multi_cell(0, 8, clean("No job market demand data available."))
    pdf.ln(8)

    # Average Salaries
    add_section_header("Average Salaries (INR/month)")
    salaries = recommendations.get("average_salaries", {})
    if salaries:
        for job, salary in salaries.items():
            pdf.cell(10, 8, "•", align='L')
            pdf.multi_cell(0, 8, clean(f"{job}: ₹{salary:,}"))
    else:
        pdf.multi_cell(0, 8, clean("No salary data available."))
    pdf.ln(8)

    # Add footer
    pdf.set_y(-20)
    pdf.set_font('Arial', 'I', 10)
    pdf.cell(0, 10, clean("Generated by SmartHire"), ln=True, align='C')

    # Save the PDF
    print(f"Saving PDF to {output_path}") # Debug log
    try:
        pdf.output(output_path)
        return True, output_path
    except Exception as e:
        return False, f"Error saving PDF: {str(e)}"

@app.route('/analyze', methods=['POST'])
def analyze_resume():
    try:
        user_id = request.form.get('user_id')
        if not user_id:
            return jsonify({"error": "No user_id provided"}), 400

        if 'resume' not in request.files:
            return jsonify({"error": "No resume file provided"}), 400

        resume_file = request.files['resume']
        if resume_file.filename == '':
            return jsonify({"error": "No file selected"}), 400

        # Simulate resume analysis (replace with actual AI processing)
        resume_data = {
            "name": "John Doe",
            "email": "john.doe@example.com",
            "skills": ["Python", "SQL", "JavaScript"]
        }
        recommendations = {
            "career_advice": "Focus on enhancing your technical skills to align with industry demands.",
            "recommended_jobs": ["Software Engineer", "Data Analyst", "Web Developer"],
            "course_links": [
                {"title": "Python for Beginners", "type": "Online", "url": "https://example.com/python"},
                {"title": "Data Science Bootcamp", "type": "Bootcamp", "url": "https://example.com/data-science"}
            ],
            "skill_gaps": {
                "Software Engineer": ["Python", "Cloud Computing"],
                "Data Analyst": ["SQL", "Statistics"]
            },
            "weekly_plan": [
                "Week 1: Learn Python basics",
                "Week 2: Study SQL fundamentals"
            ],
            "job_scope": {
                "Software Engineer": 8,
                "Data Analyst": 7
            },
            "average_salaries": {
                "Software Engineer": 100000,
                "Data Analyst": 85000
            }
        }

        # Save PDF to persistent location
        base_dir = os.path.join('Uploads', 'resumes', f'user_{user_id}')
        os.makedirs(base_dir, exist_ok=True)
        output_path = os.path.join(base_dir, 'ai_report.pdf')  # Match expected filename
        
        # Ensure the directory is writable
        try:
            os.chmod(base_dir, 0o775)
        except Exception as e:
            print(f"Warning: Could not set permissions on {base_dir}: {str(e)}")

        success, result = generate_result_pdf(resume_data, recommendations, output_path)
        if not success:
            return jsonify({"error": result}), 500

        # Return web-relative path for PHP
        web_path = f"/Uploads/resumes/user_{user_id}/ai_report.pdf"
        return jsonify({
            "resume_data": resume_data,
            "recommendations": recommendations,
            "pdf_path": web_path
        })
    except Exception as e:
        return jsonify({"error": f"Analysis failed: {str(e)}"}), 500

if __name__ == "__main__":
    app.run(debug=True, host='127.0.0.1', port=5000)
